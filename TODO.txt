- Even if -t (tracing-only) now seems to basically work for Word, it
  doesn't for Excel. That obviously needs to be fixed.

  (Related note: In the "normal" mode, the replacement application we
  are talking to *must* provide IProvideClassInfo. We don't know
  anything about for instance Collabora Office's outgoing interfaces
  at genproxy time. And they are unstable per definition as new
  callback methods are added whenever a need is noticed. Collabora
  Office built from this branch does provide IProvideClassInfo.)

- Clean up the std::cout vs. std::wcout (and std::cerr vs. std::wcerr)
  inconsistency. Decision: Just use the the plain char streams for
  logging and warnings. Add static UTF16-to-UTF8 (and reverse, if
  necessary) converters to CProxiedUnknown.

- When that done, can get rid of the utils.hpp vs utilstemp.hpp and
  just use an utils.hpp. Also don't include windowsdebugoutput.hxx
  from LibreOffice, but just copy the necessary thing, so that coleat
  can be built freestanding from LibreOffice.

- What about wmain() vs main()? Just use main(). Our command-line
  parameter are either by their natur ASCII-only or file names, and
  when command-line parameters are passed to main() they have been
  converted by the C++ runtime to system codepage, and that is what
  file names should be passed as to file opening functions anyway.
  (All our logging, tracing etc is in UTF-8, though.)

- Expand the -t output to be even more useful. Make sure callbacks
  (events) are also handled.

- Change terminology in code and comments: "Original application" =
  for example Word or Excel. "Replacement application" = for example
  Collabora Office. "Proxied application" is too unclear, we use the
  "proxy" term too much already.

- Add a -v switch to turn on the verbose logging, and make all output
  except error messages conditional on either -t or -v. (Thus, without
  any switches at all, coleat would be entirely silent, except for
  error messages.)
